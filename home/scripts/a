#!/usr/bin/env -S uv run --python 3.10 --script
# /// script
# dependencies = ["openai>=1.70.0", "openai-agents>=0.0.7"]
# ///

import argparse
import json
import os
import subprocess
import sys
import asyncio
from openai.types.responses import ResponseTextDeltaEvent
from agents import Agent, Runner, function_tool, WebSearchTool, handoff, trace

CONTEXTS_DIR = os.path.expanduser("~/.cache/a/contexts/")
MAIN_CACHE_FILE = os.path.expanduser("~/.cache/a/cache.json")


@function_tool
async def exec_shell_command(cmd: str) -> str:
    print("Executing command:", cmd)
    """Execute shell command and return its output."""
    try:
        output = subprocess.check_output(
            cmd, shell=True, stderr=subprocess.STDOUT, universal_newlines=True
        )
        return output.strip()
    except subprocess.CalledProcessError as e:
        return f"Error executing command: {e.output}"


def ensure_dirs():
    os.makedirs(CONTEXTS_DIR, exist_ok=True)


def load_cache():
    ensure_dirs()

    if os.path.exists(MAIN_CACHE_FILE):
        with open(MAIN_CACHE_FILE, "r") as f:
            context = f.read().strip()
            if context:
                return json.loads(context)

    return {}


def save_cache(cache):
    with open(MAIN_CACHE_FILE, "w") as f:
        json.dump(cache, f, indent=2)


def set_active_context(new_context):
    ensure_dirs()
    cache = load_cache()
    cache["__active__"] = new_context
    if new_context not in cache:
        cache[new_context] = []
    save_cache(cache)

def update_context(ctx, new_message):
    cache = load_cache()
    if ctx not in cache:
        cache[ctx] = []
    cache[ctx].append(new_message)
    save_cache(cache)


agent = Agent(
    name="Terminal Assistant",
    instructions="""
        You are 'a' the terminal assistant.
        Your job is to provide assistance to the user in a terminal environment.
        Make sure to be brief, to the point.
    """,
    tools=[WebSearchTool(), exec_shell_command],
)


async def main():
    parser = argparse.ArgumentParser(description="Terminal Assistant")
    parser.add_argument("-c", "--ctx", type=str, help="Switch to a new context")
    parser.add_argument("user_input", nargs="*", help="Command or query")
    args = parser.parse_args()

    if args.ctx:
        set_active_context(args.ctx)
        print(f"Switched context to {args.ctx}")
        sys.exit(0)

    cache = load_cache()
    active_context = cache.get("__active__", "default")
    print(f"Active context: {active_context}")

    command_input = " ".join(args.user_input).strip()

    if not command_input:
        command_input = (
            "User did not provide input. Infer what they might want you to do next"
        )

    print("Printing input")
    print(command_input)

    update_context(active_context, {"role": "user", "content": command_input})
    cache = load_cache()
    conversation_history = cache.get(active_context, [])
    context_items = conversation_history
    result = Runner.run_streamed(agent, input=context_items)
    full_response = ""
    async for event in result.stream_events():
        if event.type == "raw_response_event" and isinstance(
            event.data, ResponseTextDeltaEvent
        ):
            delta = event.data.delta
            full_response += delta
            print(delta, end="", flush=True)

    update_context(active_context, {"role": "assistant", "content": full_response})


if __name__ == "__main__":
    asyncio.run(main())

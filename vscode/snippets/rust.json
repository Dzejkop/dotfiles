{
    "Print type size": {
        "prefix": "type_size",
        "body": [
            "println!(\"std::mem::size_of::<{}>() = {}\", stringify!($1), std::mem::size_of::<$1>());"
        ]
    },
    "Trace debug variable": {
        "prefix": "trace",
        "body": [
            "dbg!(&$1);"
        ]
    },
    "Display helper": {
        "prefix": "trace_display",
        "body": [
            "let d_$1 = format!(\"{:?}\", $1);",
            "dbg!(&d_$1);"
        ]
    },
    "Parse Unwrap": {
        "prefix": "pu",
        "body": [
            "${1:s}.parse::<$2>().unwrap()"
        ]
    },
    "test module": {
        "prefix": "test module",
        "body": [
            "#[cfg(test)]",
            "mod tests {",
            "\tuse super::*;",
            "",
            "\t$0",
            "}"
        ]
    },
    "test": {
        "prefix": "test",
        "body": [
            "#[test]",
            "fn ${1:test_name}() {",
            "\t$0",
            "}"
        ]
    },
    "case": {
        "prefix": "test case",
        "body": [
            "#[test_case($1)]",
            "fn ${2:test_case_name}() {",
            "\t$0",
            "}"
        ]
    },
    "Public Struct": {
        "prefix": "pstruct",
        "body": [
            "pub struct $1 {",
            "\t$2",
            "}"
        ]
    },
    "Public Enum": {
        "prefix": "penum",
        "body": [
            "pub enum $1 {",
            "\t$2",
            "}"
        ]
    },
    "Newtype": {
        "prefix": "newtype",
        "body": [
            "pub struct $1($2);"
        ]
    },
    "map": {
        "prefix": ".map",
        "body": [
            ".map(|$1| ${2:unimplemented!()})$0"
        ]
    },
    "and_then": {
        "prefix": ".and_then",
        "body": [
            ".and_then(|$1| ${2:unimplemented!()})$0"
        ]
    },
    "StructOpt Struct": {
        "prefix": "structopt",
        "body": [
            "#[derive(Debug, Clone, StructOpt)]",
            "struct ${1:Opt} {",
            "\t$0",
            "}"
        ]
    },
    "StructOpt Enum": {
        "prefix": "enumopt",
        "body": [
            "#[derive(Debug, Clone, StructOpt)]",
            "#[structopt(rename_all = \"kebab-case\"]",
            "enum ${1:Opt} {",
            "\t$0",
            "}"
        ]
    }
}